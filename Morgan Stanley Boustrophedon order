This problem was asked by Morgan Stanley.
In Ancient Greece, it was common to write text with the first line going left to right, the second line going right to left, and continuing to go back and forth. This style was called "boustrophedon".

Given a binary tree, write an algorithm to print the nodes in boustrophedon order.

For example, given the following tree:

       1
    /     \
  2         3
 / \       / \
4   5     6   7
You should return [1, 3, 2, 4, 5, 6, 7]

Program:

from collections import deque

class Treenode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right
        
def buildtree(levelorder):
    if not levelorder:
        return None
    
    root = Treenode(levelorder[0])
    queue = deque([root])
    i = 1
    while queue and i < len(levelorder):
        node = queue.popleft()
        
        if levelorder[i] is not None:
            node.left = Treenode(levelorder[i])
            queue.append(node.left)
        i += 1
        if i < len(levelorder) and levelorder[i] is not None:
            node.right = Treenode(levelorder[i])
            queue.append(node.right)
        i += 1
    return root
    
def boustrophedon_order(root):
    if not root:
        return []

    result = []
    queue = deque([root])
    direction = 1 
    while queue:
        level_size = len(queue)
        level_nodes = []
        
        for _ in range(level_size):
            node = queue.popleft()
            level_nodes.append(node.val)
            if node.left:
                queue.append(node.left)
            if node.right:
                queue.append(node.right)
        
        if direction == -1:
            level_nodes.reverse()
        result.extend(level_nodes)
        direction *= -1
    
    return result

def main():
    print("you can enter none if no node is present")
    level_order_input = input("Enter the level-order values of the tree:")
    levelorder = [None if val == 'None' else int(val) for val in level_order_input.split()]
    root = buildtree(levelorder)
    result = boustrophedon_order(root)
    print("Boustrophedon Order:", result)

if __name__ == "__main__":
    main()

Output:
you can enter none if no node is present
Enter the level-order values of the tree:3 2 14 6 3
Boustrophedon Order: [3, 14, 2, 6, 3]
