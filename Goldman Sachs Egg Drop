We will use the dynamic programming approach.

Program:
def eggdrop(N, K):
    dp = [[0 for x in range(K + 1)] for x in range(N + 1)]
    
    for m in range(1, K + 1):
        dp[1][m] = m  
    
    for n in range(1, N + 1):
        dp[n][0] = 0  
        dp[n][1] = 1  

    for n in range(2, N + 1):
        for m in range(2, K + 1):
            dp[n][m] = float('inf')
            low, high = 1, m
            while low <= high:
                mid = (low + high) // 2
                breaks = dp[n - 1][mid - 1]  
                doesnt_break = dp[n][m - mid]  
                worst_case = 1 + max(breaks, doesnt_break)
                
                if breaks > doesnt_break:
                    high = mid - 1
                else:
                    low = mid + 1
                
                dp[n][m] = min(dp[n][m], worst_case)

    return dp[N][K]

def main():
    N = int(input("Enter the number of eggs: "))
    K = int(input("Enter the number of floors: "))
    
    result = eggdrop(N, K)
    print(f"The minimum number of trials in the worst case with {N} eggs and {K} floors is: {result}")

if __name__ == "__main__":
    main()
