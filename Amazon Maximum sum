This problem was asked by Amazon.

Given an array of numbers, find the maximum sum of any contiguous subarray of the array.

For example, given the array [34, -50, 42, 14, -5, 86], the maximum sum would be 137, since we would take elements 42, 14, -5, and 86.

Given the array [-5, -1, -8, -9], the maximum sum would be 0, since we would not take any elements.

Do this in O(N) time.

Program:

def maximum_sum_of_subarray(arr):
    current_sum = 0
    max_sum = 0  

    for num in arr:
        current_sum = max(num, current_sum + num)
        max_sum = max(max_sum, current_sum)

    return max_sum

user_input = input("Enter numbers for array: ")
arr = list(map(int, user_input.split()))

result = maximum_sum_of_subarray(arr)
print(f"The maximum sum of any contiguous subarray is: {result}")

Output: 
Enter numbers for array: -4 5 10 9 -2
The maximum sum of any contiguous subarray is: 24

Time Complexity: O(n) because we trace each element of the array of length n only once
